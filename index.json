[{"content":"Are you curious about what\u0026rsquo;s inside your favorite Android apps? Do you want to peek under the hood and understand how they work? Welcome, fellow dimwit! In this guide, we\u0026rsquo;ll embark on a thrilling journey into the world of reverse engineering Android APKs, step by step.\nPrerequisites Before we begin, make sure you have the following:\nBasic understanding of Android apps Android Studio installed on your computer A decompiler tool (we\u0026rsquo;ll use JADX) Patience and a curious mind! Step 1: Obtain the APK The first step is to obtain the APK file of the app you want to reverse engineer. You can download APKs from various sources or extract them from your own device using tools like ADB (Android Debug Bridge).\nStep 2: Setting up Android Studio If you haven\u0026rsquo;t already, install Android Studio. We\u0026rsquo;ll use it to set up a basic project for viewing the decompiled code.\nStep 3: Decompiling the APK Next, we\u0026rsquo;ll use JADX, a powerful decompiler tool, to decompile the APK and view its Java code. Simply drag and drop the APK file into JADX, and it will decompile the code for you.\nStep 4: Analyzing the Decompiled Code Now comes the fun part! Dive into the decompiled code and start exploring. Look for interesting classes, methods, and resources. Try to understand how different parts of the app function together.\nStep 5: Modifying and Experimenting Feeling adventurous? Experiment with the code! Make small changes and see how they affect the app\u0026rsquo;s behavior. But remember, always do this in a controlled environment, preferably on a test device or emulator.\nStep 6: Building Your Own Understanding As you explore the decompiled code, take notes and document your findings. Building your understanding of how Android apps work will not only enhance your reverse engineering skills but also deepen your overall knowledge of mobile development.\nStep 7: Ethical Considerations It\u0026rsquo;s crucial to remember the ethical implications of reverse engineering. Respect the developer\u0026rsquo;s intellectual property rights and only use your newfound knowledge for learning purposes. Avoid reverse engineering apps with malicious intent or for illegal activities.\nConclusion Congratulations, dimwit! You\u0026rsquo;ve successfully embarked on a journey into the fascinating world of reverse engineering Android APKs. Remember, this is just the beginning. Keep exploring, learning, and pushing the boundaries of your curiosity. Happy hacking!\nStay tuned for more exciting adventures in the world of tech on [Your Blog Name]!\n","permalink":"http://localhost:1313/posts/reverse-engg/","summary":"Are you curious about what\u0026rsquo;s inside your favorite Android apps? Do you want to peek under the hood and understand how they work? Welcome, fellow dimwit! In this guide, we\u0026rsquo;ll embark on a thrilling journey into the world of reverse engineering Android APKs, step by step.\nPrerequisites Before we begin, make sure you have the following:\nBasic understanding of Android apps Android Studio installed on your computer A decompiler tool (we\u0026rsquo;ll use JADX) Patience and a curious mind!","title":"Reverse Engineering an Android APK: A Step-by-Step Guide for Dimwits"},{"content":"This post is an overview of how I went off the grid ‚Äì or, in other words, moved all my personal websites off Azure and onto a Raspberry Pi cluster sitting in my home office. This isn\u0026rsquo;t exactly a tutorial blog post, but feel free to use this as a reference.\nWhy do this at all? You might be wondering, \u0026ldquo;Savannah, why do this? Didn\u0026rsquo;t you used to work on Azure tooling full-time?\u0026rdquo; To which I\u0026rsquo;d reply, \u0026ldquo;Yes, yes I did.\u0026rdquo; But really, this isn\u0026rsquo;t about criticizing Azure or any other major cloud service provider. I simply enjoy physical computing, like to experiment, and also no longer receive any free employee credits for Azure, so I thought, why not?\nMeet Arrakis! Alright, I might have had Dune on the brain when I built this, but Dune Part Two is literally a masterpiece, so can you blame me? My little rig consists of 3 Raspberry Pi 4Bs (each with 4 CPUs and 8 GB RAM), all running Raspberry Pi OS Lite (64-bit), which is a port of Debian Bullseye without a desktop environment. Each of these devices uses Power over Ethernet (PoE) for networking and power over a single cable per Pi. I\u0026rsquo;ll delve into this a bit later, but it\u0026rsquo;s worth noting that the cluster doesn\u0026rsquo;t run Kubernetes; instead, it leverages Docker Swarm to create the cluster (it\u0026rsquo;s literally 2 commands to configure everything ‚Äì mind blown!).\nMaterials for the build I\u0026rsquo;ll be candid ‚Äì this wasn\u0026rsquo;t cheap. Raspberry Pis are hot commodities, so it cost me a pretty penny to gather everything I needed for this build. I\u0026rsquo;ll link what I bought, but do keep in mind that prices may vary. At the time of building, this set me back approximately $506.67 USD.\nItem Price (in USD) Notes C4Labs Cloudlet Case in Clear $99.08 Though I\u0026rsquo;m only building a 3 Pi cluster right now, this gives me some space to store the Switch or add additional Pis in the future TP-Link TL-SG1005P, 5 Port Gigabit PoE Switch $49.53 UCTRONICS PoE HAT for Raspberry Pi (3x) $21.99 1.5-ft Ethernet cables (6 pack) $16.99 Raspberry Pi 4 Model B 8GB (3x) $82.71 Obviously, this is where I spent the most money. SanDisk Ultra 32GB Micro SD (3x) $8.99 Total $506.67 That said, if you\u0026rsquo;re following along, you may need a couple of other things depending on what you have lying around at home, like a memory card reader for imaging the SD cards. Thankfully, I had one built into my USB dock, so this was unnecessary.\nSetting up the cluster Step 1: Image a micro SD card for each Pi After assembling the cluster physically, it was time to sort out the software bits. First, I imaged each micro SD card with Raspberry Pi OS Lite using the Raspberry Pi Imager utility, and then I inserted each micro SD into each Pi. A vital step here is to remember to go into options and tick the box that allows you to configure SSH with a password before imaging the SD cards.\nStep 2: Install Docker üê≥ Then, I waited for each of them to appear on my home network and grabbed their IP addresses and made note of which Pi had which IP address. After that, I ssh\u0026rsquo;d into each one and installed Docker using the official release (which gets updated more frequently than Docker distributed via distros\u0026hellip;heck yes, Moby 26 is out!). I had 3 different terminal tabs opened while I was working so I could switch between them quickly.\nStep 3: Create the cluster using Docker Swarm I\u0026rsquo;ll be honest ‚Äì I initially planned to set up the cluster with Kubernetes via k3s, but boy howdy, that gave me so many problems right from the get-go. Also, it\u0026rsquo;s a bit of a meme to host your blog on Kubernetes, so I quickly changed my plan and decided to use Swarm instead. Setting this up was truly magical, save for one snag. Here\u0026rsquo;s how it works:\nChoose one of your Pis to be your Swarm leader. Run docker swarm init in the Swarm leader\u0026rsquo;s terminal. Copy the generated command and token (docker swarm join). Paste the docker swarm join command into the other Pi terminals. Boom! You have yourself a cluster ‚ú® Seriously, it\u0026rsquo;s that simple! You can validate that everything is working as expected using docker node ls on any of your nodes. Note: I did run into one little snag with networking, where the default network of the cluster overlapped 1:1 with my home network. I discovered this much later when ingress was broken and I couldn\u0026rsquo;t figure out why. Before moving on, it might be worth verifying that this is not the case. If it is, the fix is fairly simple. You\u0026rsquo;ll just need to customize the ingress network. Shout out to this StackOverflow post for helping me debug this!\nStep 4: Write the docker-compose.yml for your services Time to get to defining our services! In this case, I had two websites I wanted to host: 1) my personal website (where you\u0026rsquo;re reading this post!) and 2) an uber-professional website that\u0026rsquo;s an inside joke.\nIf you\u0026rsquo;re familiar with Docker, this part is quite straightforward. I had already pushed my website images up to Docker Hub, so this was a pretty quick operation. The only Swarm-specific thing I needed to do is to tell Docker that I had a custom network called arrakis and then make sure that my services connect to it.\nservices: savannahdev: image: \u0026#34;savannahostrowski/savannah.dev\u0026#34; ports: - \u0026#34;8080:80\u0026#34; networks: - arrakis deploy: mode: replicated replicas: 3 getshreked: image: \u0026#34;savannahostrowski/getshreked\u0026#34; ports: - \u0026#34;8081:80\u0026#34; networks: - arrakis deploy: mode: replicated replicas: 3 networks: arrakis: {} Deploying this Compose file is a single command using docker stack deploy --compose-file docker-compose.yml arrakis from the leader node. Once this command was run, I validated that the services were operational via docker stack services arrakis.\nAt this point, you should be able to hit the endpoints on any one of the cluster node IPs and see your website!\nStep 5: Set up cloudflared as a service in the cluster The last bit here was to obfuscate my IP addresses and make this all accessible to the outside world via my chosen domains. If you thought the cluster setup was magic, just wait until you see how simple it was to set this bit up.\nThanks to CloudFlare, I\u0026rsquo;m able to do this all via Tunnels ‚Äì or, rather, a single Cloudflared tunnel in my case. This was really as easy as going to my CloudFlare dashboard, creating a tunnel, copying an installation command to paste into my leader node (sudo cloudflared service install \u0026lt;token\u0026gt;), creating another service in my docker-compose.yml, and then redeploying the stack (docker stack deploy --compose-file docker-compose.yml arrakis).\nservices: savannahdev: image: \u0026#34;savannahostrowski/savannah.dev\u0026#34; ports: - \u0026#34;8080:80\u0026#34; networks: - arrakis deploy: mode: replicated replicas: 3 getshreked: image: \u0026#34;savannahostrowski/getshreked\u0026#34; ports: - \u0026#34;8081:80\u0026#34; networks: - arrakis deploy: mode: replicated replicas: 3 cloudflared: image: \u0026#34;cloudflare/cloudflared\u0026#34; command: \u0026#34;tunnel --no-autoupdate run --token \u0026lt;my-token-here\u0026gt;\u0026#34; deploy: restart_policy: condition: on-failure mode: replicated replicas: 3 networks: - arrakis networks: arrakis: {} The last bit here is to configure your public hostnames. In my case, I had one for each website I was deploying. What\u0026rsquo;s really neat is that you just have to pass in the service name:port (where service name matches the Compose service name and port matches your port internal to the container) for it to all work. Bonus: Set up Tailscale for easy access to my cluster nodes This isn\u0026rsquo;t required but I also took advantage of Tailscale\u0026rsquo;s free tier (up to 100 devices!) for easy access to my cluster nodes.\nAnd that\u0026rsquo;s pretty much it! Hopefully you found this sort of fun - I sure did!\n","permalink":"http://localhost:1313/posts/raspberry-pi-cluster/","summary":"Moving all my personal websites to a Raspberry Pi cluster sitting in my home office","title":"Self-hosting on a Raspberry Pi cluster"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;‚Äî\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n‚Äî Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested Unordered list Fruit Apple Orange Banana Dairy Milk Cheese Nested Ordered list Fruit Apple Orange Banana Dairy Milk Cheese Third item Sub One Sub Two Other Elements ‚Äî abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"http://localhost:1313/posts/markdown-syntax/","summary":"\u003cp\u003eThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\u003c/p\u003e","title":"Markdown Syntax Guide"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nüôà :see_no_evil: üôâ :hear_no_evil: üôä :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","permalink":"http://localhost:1313/posts/emoji-support/","summary":"\u003cp\u003eEmoji can be enabled in a Hugo project in a number of ways.\u003c/p\u003e","title":"Emoji Support"}]