<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>codeFright</title>
    <link>https://www.codefright.com/</link>
    <description>Recent content on codeFright</description>
    <image>
      <title>codeFright</title>
      <url>https://www.codefright.com/static/logo.png</url>
      <link>https://www.codefright.com/static/logo.png</link>
    </image>
    <generator>Hugo -- 0.126.1</generator>
    <language>en-us</language>
    <copyright>2025 codeFright</copyright>
    <lastBuildDate>Sun, 22 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.codefright.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lets Explore Jetpack Compose!</title>
      <link>https://www.codefright.com/posts/jetpack-compose/</link>
      <pubDate>Sun, 22 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://www.codefright.com/posts/jetpack-compose/</guid>
      <description>Hey! Let&amp;rsquo;s explore Jetpack Compose and see how it makes Android UI development more enjoyable.
What is Jetpack Compose? Compose is just a different way to build your app&amp;rsquo;s UI. Instead of writing XML layouts and then manipulating them with code, you write Kotlin functions that describe your UI. It&amp;rsquo;s that simple.
Getting Started First, add these to your build.gradle:
dependencies { implementation &amp;#34;androidx.compose.ui:ui:1.5.4&amp;#34; implementation &amp;#34;androidx.compose.material:material:1.5.4&amp;#34; implementation &amp;#34;androidx.compose.ui:ui-tooling-preview:1.5.4&amp;#34; } Your First Composable Let&amp;rsquo;s write something simple:</description>
      <content:encoded><![CDATA[<p>Hey! Let&rsquo;s explore Jetpack Compose and see how it makes Android UI development more enjoyable.</p>
<h2 id="what-is-jetpack-compose">What is Jetpack Compose?</h2>
<p>Compose is just a different way to build your app&rsquo;s UI. Instead of writing XML layouts and then manipulating them with code, you write Kotlin functions that describe your UI. It&rsquo;s that simple.</p>
<h2 id="getting-started">Getting Started</h2>
<p>First, add these to your <code>build.gradle</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">implementation</span> <span class="s2">&#34;androidx.compose.ui:ui:1.5.4&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">implementation</span> <span class="s2">&#34;androidx.compose.material:material:1.5.4&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">implementation</span> <span class="s2">&#34;androidx.compose.ui:ui-tooling-preview:1.5.4&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="your-first-composable">Your First Composable</h2>
<p>Let&rsquo;s write something simple:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="nd">@Composable</span>
</span></span><span class="line"><span class="cl"><span class="k">fun</span> <span class="nf">WelcomeText</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Text</span><span class="p">(</span><span class="s2">&#34;Hey </span><span class="si">$name</span><span class="s2">, welcome to Compose!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>That&rsquo;s it! The <code>@Composable</code> annotation tells Compose that this function outputs UI elements. You can use it like any regular Kotlin function.</p>
<h2 id="state-making-things-interactive">State: Making Things Interactive</h2>
<p>State in Compose is just data that can change over time. When it changes, Compose updates your UI automatically:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="nd">@Composable</span>
</span></span><span class="line"><span class="cl"><span class="k">fun</span> <span class="nf">Counter</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">var</span> <span class="py">count</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">Column</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Text</span><span class="p">(</span><span class="s2">&#34;You clicked </span><span class="si">$count</span><span class="s2"> times&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">count</span><span class="o">++</span> <span class="p">})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">Text</span><span class="p">(</span><span class="s2">&#34;Click me&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="modifiers-styling-your-ui">Modifiers: Styling Your UI</h2>
<p>Modifiers are like CSS for your composables. They let you change how things look and behave:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="nd">@Composable</span>
</span></span><span class="line"><span class="cl"><span class="k">fun</span> <span class="nf">StyledButton</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">text</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">onClick</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Button</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">height</span><span class="p">(</span><span class="m">48.</span><span class="n">dp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Text</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="common-gotchas-to-watch-out-for">Common Gotchas to Watch Out For</h2>
<ol>
<li><strong>State Reset</strong>: Don&rsquo;t declare state outside composable functions:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// DON&#39;T do this
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">var</span> <span class="py">count</span> <span class="p">=</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="c1">// Will reset on recomposition
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// DO this instead
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">var</span> <span class="py">count</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="p">}</span>
</span></span></code></pre></div><ol start="2">
<li><strong>Wrong Thread</strong>: UI updates must happen on the main thread:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// DON&#39;T do this
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">key1</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">withContext</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">IO</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// UI updates here will crash
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// DO this instead
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">key1</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">data</span> <span class="p">=</span> <span class="n">withContext</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">IO</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Do background work
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Update UI on main thread
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h2 id="real-world-example-a-user-card">Real World Example: A User Card</h2>
<p>Here&rsquo;s how you might build a user profile card:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="nd">@Composable</span>
</span></span><span class="line"><span class="cl"><span class="k">fun</span> <span class="nf">UserCard</span><span class="p">(</span><span class="n">user</span><span class="p">:</span> <span class="n">User</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Card</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Row</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">verticalAlignment</span> <span class="p">=</span> <span class="nc">Alignment</span><span class="p">.</span><span class="n">CenterVertically</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Avatar
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">AsyncImage</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">model</span> <span class="p">=</span> <span class="n">user</span><span class="p">.</span><span class="n">avatarUrl</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">contentDescription</span> <span class="p">=</span> <span class="s2">&#34;Profile picture&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span></span><span class="line"><span class="cl">                    <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">50.</span><span class="n">dp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">CircleShape</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="n">Spacer</span><span class="p">(</span><span class="nc">Modifier</span><span class="p">.</span><span class="n">width</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="c1">// User info
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">Column</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">Text</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">text</span> <span class="p">=</span> <span class="n">user</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="n">style</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="n">subtitle1</span>
</span></span><span class="line"><span class="cl">                <span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">Text</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">text</span> <span class="p">=</span> <span class="n">user</span><span class="p">.</span><span class="n">email</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="n">style</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="n">body2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="n">color</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">onSurface</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">alpha</span> <span class="p">=</span> <span class="m">0.6f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="why-use-compose">Why Use Compose?</h2>
<ol>
<li><strong>Less Code</strong>: No more XML layouts or view binding</li>
<li><strong>Preview Support</strong>: See your UI changes instantly in Android Studio</li>
<li><strong>Reusable Components</strong>: Easy to create and share UI components</li>
<li><strong>State Management</strong>: Automatic UI updates when data changes</li>
</ol>
<h2 id="useful-tips">Useful Tips</h2>
<ol>
<li>Break down large composables into smaller ones</li>
<li>Use previews for quick iteration</li>
<li>Keep state at the appropriate level</li>
<li>Use appropriate scopes for side effects</li>
</ol>
<h2 id="conclusion">Conclusion</h2>
<p>Compose might feel different at first, but it makes UI development much more straightforward once you get used to it. Start with small components, understand how state works, and you&rsquo;ll be building complex UIs in no time.</p>
<p>Don&rsquo;t forget to check out my other articles!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Guide to Custom Views in Android</title>
      <link>https://www.codefright.com/posts/custom-views/</link>
      <pubDate>Wed, 18 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://www.codefright.com/posts/custom-views/</guid>
      <description>Remember that time you needed a widget that Android doesn&amp;rsquo;t provide out of the box? Maybe a circular progress bar that looks like a pizza being eaten? Well, grab your favorite beverage, because we&amp;rsquo;re about to dive into the world of custom views!
Why Create Custom Views? Sometimes the standard Android widgets just don&amp;rsquo;t cut it. Maybe you need:
A special animation effect A unique user interaction That perfect design your UI/UX team dreamed up The Basics: Anatomy of a Custom View Here&amp;rsquo;s a simple custom view that draws a circle that changes color when touched:</description>
      <content:encoded><![CDATA[<p>Remember that time you needed a widget that Android doesn&rsquo;t provide out of the box? Maybe a circular progress bar that looks like a pizza being eaten? Well, grab your favorite beverage, because we&rsquo;re about to dive into the world of custom views!</p>
<h2 id="why-create-custom-views">Why Create Custom Views?</h2>
<p>Sometimes the standard Android widgets just don&rsquo;t cut it. Maybe you need:</p>
<ul>
<li>A special animation effect</li>
<li>A unique user interaction</li>
<li>That perfect design your UI/UX team dreamed up</li>
</ul>
<h2 id="the-basics-anatomy-of-a-custom-view">The Basics: Anatomy of a Custom View</h2>
<p>Here&rsquo;s a simple custom view that draws a circle that changes color when touched:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ColorChangeCircleView</span> <span class="nd">@JvmOverloads</span> <span class="k">constructor</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">attrs</span><span class="p">:</span> <span class="n">AttributeSet</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">defStyleAttr</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="p">:</span> <span class="n">View</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">attrs</span><span class="p">,</span> <span class="n">defStyleAttr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">val</span> <span class="py">paint</span> <span class="p">=</span> <span class="n">Paint</span><span class="p">(</span><span class="nc">Paint</span><span class="p">.</span><span class="n">ANTI_ALIAS_FLAG</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">var</span> <span class="py">currentColor</span> <span class="p">=</span> <span class="nc">Color</span><span class="p">.</span><span class="n">BLUE</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">init</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Enable touch events
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">isClickable</span> <span class="p">=</span> <span class="k">true</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onDraw</span><span class="p">(</span><span class="n">canvas</span><span class="p">:</span> <span class="n">Canvas</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">super</span><span class="p">.</span><span class="n">onDraw</span><span class="p">(</span><span class="n">canvas</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// Get the center and radius
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">val</span> <span class="py">centerX</span> <span class="p">=</span> <span class="n">width</span> <span class="p">/</span> <span class="m">2f</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">centerY</span> <span class="p">=</span> <span class="n">height</span> <span class="p">/</span> <span class="m">2f</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">radius</span> <span class="p">=</span> <span class="n">min</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span> <span class="p">/</span> <span class="m">3f</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// Draw the circle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">paint</span><span class="p">.</span><span class="n">color</span> <span class="p">=</span> <span class="n">currentColor</span>
</span></span><span class="line"><span class="cl">        <span class="n">canvas</span><span class="p">.</span><span class="n">drawCircle</span><span class="p">(</span><span class="n">centerX</span><span class="p">,</span> <span class="n">centerY</span><span class="p">,</span> <span class="n">radius</span><span class="p">,</span> <span class="n">paint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onTouchEvent</span><span class="p">(</span><span class="n">event</span><span class="p">:</span> <span class="n">MotionEvent</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">when</span> <span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nc">MotionEvent</span><span class="p">.</span><span class="n">ACTION_DOWN</span> <span class="o">-&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// Change color randomly
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">currentColor</span> <span class="p">=</span> <span class="nc">Color</span><span class="p">.</span><span class="n">rgb</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="nc">Random</span><span class="p">.</span><span class="n">nextInt</span><span class="p">(</span><span class="m">256</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                    <span class="nc">Random</span><span class="p">.</span><span class="n">nextInt</span><span class="p">(</span><span class="m">256</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                    <span class="nc">Random</span><span class="p">.</span><span class="n">nextInt</span><span class="p">(</span><span class="m">256</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">invalidate</span><span class="p">()</span> <span class="c1">// Redraw the view
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">return</span> <span class="k">true</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">super</span><span class="p">.</span><span class="n">onTouchEvent</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="understanding-the-view-lifecycle">Understanding the View Lifecycle</h2>
<h3 id="measurement-and-layout">Measurement and Layout</h3>
<p>The view lifecycle is crucial for proper rendering. Here&rsquo;s how to handle measurement and layout:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">override</span> <span class="k">fun</span> <span class="nf">onMeasure</span><span class="p">(</span><span class="n">widthMeasureSpec</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">heightMeasureSpec</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Calculate the ideal size of the view based on content
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">val</span> <span class="py">desiredWidth</span> <span class="p">=</span> <span class="n">suggestedMinimumWidth</span> <span class="p">+</span> <span class="n">paddingLeft</span> <span class="p">+</span> <span class="n">paddingRight</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">desiredHeight</span> <span class="p">=</span> <span class="n">suggestedMinimumHeight</span> <span class="p">+</span> <span class="n">paddingTop</span> <span class="p">+</span> <span class="n">paddingBottom</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Reconcile size with any constraints from the parent
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">val</span> <span class="py">finalWidth</span> <span class="p">=</span> <span class="n">resolveSize</span><span class="p">(</span><span class="n">desiredWidth</span><span class="p">,</span> <span class="n">widthMeasureSpec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">finalHeight</span> <span class="p">=</span> <span class="n">resolveSize</span><span class="p">(</span><span class="n">desiredHeight</span><span class="p">,</span> <span class="n">heightMeasureSpec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Must call this to save the measurements
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">setMeasuredDimension</span><span class="p">(</span><span class="n">finalWidth</span><span class="p">,</span> <span class="n">finalHeight</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">override</span> <span class="k">fun</span> <span class="nf">onSizeChanged</span><span class="p">(</span><span class="n">w</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">h</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">oldw</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">oldh</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">super</span><span class="p">.</span><span class="n">onSizeChanged</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">oldw</span><span class="p">,</span> <span class="n">oldh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Update size-dependent calculations
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">circleRadius</span> <span class="p">=</span> <span class="n">min</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span> <span class="p">/</span> <span class="m">3f</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// Update drawing bounds
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">rect</span><span class="p">.</span><span class="k">set</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">paddingLeft</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">        <span class="n">paddingTop</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="n">w</span> <span class="p">-</span> <span class="n">paddingRight</span><span class="p">).</span><span class="n">toFloat</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="n">h</span> <span class="p">-</span> <span class="n">paddingBottom</span><span class="p">).</span><span class="n">toFloat</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="state-management">State Management</h3>
<p>Always handle configuration changes and state restoration:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">override</span> <span class="k">fun</span> <span class="nf">onSaveInstanceState</span><span class="p">():</span> <span class="n">Parcelable</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">superState</span> <span class="p">=</span> <span class="k">super</span><span class="p">.</span><span class="n">onSaveInstanceState</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">Bundle</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">putParcelable</span><span class="p">(</span><span class="s2">&#34;superState&#34;</span><span class="p">,</span> <span class="n">superState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">putInt</span><span class="p">(</span><span class="s2">&#34;currentColor&#34;</span><span class="p">,</span> <span class="n">currentColor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">override</span> <span class="k">fun</span> <span class="nf">onRestoreInstanceState</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">Parcelable</span><span class="p">?)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">bundle</span> <span class="p">=</span> <span class="n">state</span> <span class="k">as</span> <span class="n">Bundle</span>
</span></span><span class="line"><span class="cl">    <span class="k">super</span><span class="p">.</span><span class="n">onRestoreInstanceState</span><span class="p">(</span><span class="n">bundle</span><span class="p">.</span><span class="n">getParcelable</span><span class="p">(</span><span class="s2">&#34;superState&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">currentColor</span> <span class="p">=</span> <span class="n">bundle</span><span class="p">.</span><span class="n">getInt</span><span class="p">(</span><span class="s2">&#34;currentColor&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">invalidate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="making-it-configurable">Making It Configurable</h2>
<p>Let&rsquo;s make our view configurable through XML with various attribute types:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;resources&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;declare-styleable</span> <span class="na">name=</span><span class="s">&#34;ColorChangeCircleView&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&#34;circleRadius&#34;</span> <span class="na">format=</span><span class="s">&#34;dimension&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&#34;defaultColor&#34;</span> <span class="na">format=</span><span class="s">&#34;color&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&#34;shapeStyle&#34;</span> <span class="na">format=</span><span class="s">&#34;enum&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;enum</span> <span class="na">name=</span><span class="s">&#34;filled&#34;</span> <span class="na">value=</span><span class="s">&#34;0&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;enum</span> <span class="na">name=</span><span class="s">&#34;stroke&#34;</span> <span class="na">value=</span><span class="s">&#34;1&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/attr&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&#34;strokeWidth&#34;</span> <span class="na">format=</span><span class="s">&#34;dimension&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&#34;enableAnimation&#34;</span> <span class="na">format=</span><span class="s">&#34;boolean&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/declare-styleable&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/resources&gt;</span>
</span></span></code></pre></div><p>And the corresponding Kotlin implementation:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">init</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">context</span><span class="p">.</span><span class="n">theme</span><span class="p">.</span><span class="n">obtainStyledAttributes</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">attrs</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nc">R</span><span class="p">.</span><span class="n">styleable</span><span class="p">.</span><span class="n">ColorChangeCircleView</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="m">0</span><span class="p">,</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">    <span class="p">).</span><span class="n">apply</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">circleRadius</span> <span class="p">=</span> <span class="n">getDimension</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="nc">R</span><span class="p">.</span><span class="n">styleable</span><span class="p">.</span><span class="n">ColorChangeCircleView_circleRadius</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">resources</span><span class="p">.</span><span class="n">getDimension</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">dimen</span><span class="p">.</span><span class="n">default_radius</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">defaultColor</span> <span class="p">=</span> <span class="n">getColor</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="nc">R</span><span class="p">.</span><span class="n">styleable</span><span class="p">.</span><span class="n">ColorChangeCircleView_defaultColor</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nc">Color</span><span class="p">.</span><span class="n">BLUE</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">shapeStyle</span> <span class="p">=</span> <span class="n">getInt</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="nc">R</span><span class="p">.</span><span class="n">styleable</span><span class="p">.</span><span class="n">ColorChangeCircleView_shapeStyle</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">SHAPE_STYLE_FILLED</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">strokeWidth</span> <span class="p">=</span> <span class="n">getDimension</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="nc">R</span><span class="p">.</span><span class="n">styleable</span><span class="p">.</span><span class="n">ColorChangeCircleView_strokeWidth</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">resources</span><span class="p">.</span><span class="n">getDimension</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">dimen</span><span class="p">.</span><span class="n">default_stroke_width</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">enableAnimation</span> <span class="p">=</span> <span class="n">getBoolean</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="nc">R</span><span class="p">.</span><span class="n">styleable</span><span class="p">.</span><span class="n">ColorChangeCircleView_enableAnimation</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="k">false</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">recycle</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">currentColor</span> <span class="p">=</span> <span class="n">defaultColor</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="advanced-touch-handling">Advanced Touch Handling</h2>
<p>Implement sophisticated touch interactions using GestureDetector:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ColorChangeCircleView</span> <span class="p">:</span> <span class="n">View</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">val</span> <span class="py">gestureDetector</span> <span class="p">=</span> <span class="n">GestureDetectorCompat</span><span class="p">(</span><span class="n">context</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="k">object</span> <span class="err">: </span><span class="nc">GestureDetector</span><span class="p">.</span><span class="n">SimpleOnGestureListener</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">override</span> <span class="k">fun</span> <span class="nf">onDown</span><span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="n">MotionEvent</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">override</span> <span class="k">fun</span> <span class="nf">onSingleTapUp</span><span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="n">MotionEvent</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">changeColor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="k">true</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">override</span> <span class="k">fun</span> <span class="nf">onFling</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">e1</span><span class="p">:</span> <span class="n">MotionEvent</span><span class="p">?,</span> <span class="n">e2</span><span class="p">:</span> <span class="n">MotionEvent</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">velocityX</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span> <span class="n">velocityY</span><span class="p">:</span> <span class="n">Float</span>
</span></span><span class="line"><span class="cl">            <span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">startSpinAnimation</span><span class="p">(</span><span class="n">velocityX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="k">true</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onTouchEvent</span><span class="p">(</span><span class="n">event</span><span class="p">:</span> <span class="n">MotionEvent</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">gestureDetector</span><span class="p">.</span><span class="n">onTouchEvent</span><span class="p">(</span><span class="n">event</span><span class="p">)</span> <span class="o">||</span> <span class="k">super</span><span class="p">.</span><span class="n">onTouchEvent</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="animation-integration">Animation Integration</h2>
<p>Add smooth animations to your custom view:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">private</span> <span class="k">fun</span> <span class="nf">startColorAnimation</span><span class="p">(</span><span class="n">newColor</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nc">ValueAnimator</span><span class="p">.</span><span class="n">ofArgb</span><span class="p">(</span><span class="n">currentColor</span><span class="p">,</span> <span class="n">newColor</span><span class="p">).</span><span class="n">apply</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">duration</span> <span class="p">=</span> <span class="m">300</span>
</span></span><span class="line"><span class="cl">        <span class="n">interpolator</span> <span class="p">=</span> <span class="n">FastOutSlowInInterpolator</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">addUpdateListener</span> <span class="p">{</span> <span class="n">animator</span> <span class="o">-&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="n">currentColor</span> <span class="p">=</span> <span class="n">animator</span><span class="p">.</span><span class="n">animatedValue</span> <span class="k">as</span> <span class="n">Int</span>
</span></span><span class="line"><span class="cl">            <span class="n">invalidate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">start</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="accessibility-considerations">Accessibility Considerations</h2>
<p>Make your custom view accessible to all users:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">init</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Set content description
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">contentDescription</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">getString</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">color_circle_description</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// Enable accessibility events
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">importantForAccessibility</span> <span class="p">=</span> <span class="n">IMPORTANT_FOR_ACCESSIBILITY_YES</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">override</span> <span class="k">fun</span> <span class="nf">onInitializeAccessibilityNodeInfo</span><span class="p">(</span><span class="n">info</span><span class="p">:</span> <span class="n">AccessibilityNodeInfo</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">super</span><span class="p">.</span><span class="n">onInitializeAccessibilityNodeInfo</span><span class="p">(</span><span class="n">info</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">info</span><span class="p">.</span><span class="n">className</span> <span class="p">=</span> <span class="n">Button</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span><span class="p">.</span><span class="n">name</span>
</span></span><span class="line"><span class="cl">    <span class="n">info</span><span class="p">.</span><span class="n">isClickable</span> <span class="p">=</span> <span class="k">true</span>
</span></span><span class="line"><span class="cl">    <span class="n">info</span><span class="p">.</span><span class="n">addAction</span><span class="p">(</span><span class="nc">AccessibilityNodeInfo</span><span class="p">.</span><span class="n">ACTION_CLICK</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="performance-tips">Performance Tips</h2>
<ol>
<li><strong>Avoid Object Creation in onDraw()</strong></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// BAD
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">override</span> <span class="k">fun</span> <span class="nf">onDraw</span><span class="p">(</span><span class="n">canvas</span><span class="p">:</span> <span class="n">Canvas</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">paint</span> <span class="p">=</span> <span class="n">Paint</span><span class="p">()</span> <span class="c1">// Don&#39;t do this!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">canvas</span><span class="p">.</span><span class="n">drawCircle</span><span class="p">(</span><span class="o">..</span><span class="p">.)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// GOOD
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">private</span> <span class="k">val</span> <span class="py">paint</span> <span class="p">=</span> <span class="n">Paint</span><span class="p">()</span> <span class="c1">// Create once in initialization
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">override</span> <span class="k">fun</span> <span class="nf">onDraw</span><span class="p">(</span><span class="n">canvas</span><span class="p">:</span> <span class="n">Canvas</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">canvas</span><span class="p">.</span><span class="n">drawCircle</span><span class="p">(</span><span class="o">..</span><span class="p">.)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ol start="2">
<li><strong>Use Hardware Acceleration</strong></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl">android:hardwareAccelerated=&#34;true&#34;
</span></span></code></pre></div><ol start="3">
<li><strong>Optimize Invalidation</strong></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// Only invalidate the necessary area
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">invalidate</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">top</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">bottom</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Use post for thread-safe invalidation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">postInvalidate</span><span class="p">()</span>
</span></span></code></pre></div><h2 id="debugging-tips">Debugging Tips</h2>
<ol>
<li>Debug draw mode:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">override</span> <span class="k">fun</span> <span class="nf">onDraw</span><span class="p">(</span><span class="n">canvas</span><span class="p">:</span> <span class="n">Canvas</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">super</span><span class="p">.</span><span class="n">onDraw</span><span class="p">(</span><span class="n">canvas</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nc">BuildConfig</span><span class="p">.</span><span class="n">DEBUG</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">paint</span><span class="p">.</span><span class="n">style</span> <span class="p">=</span> <span class="nc">Paint</span><span class="p">.</span><span class="nc">Style</span><span class="p">.</span><span class="n">STROKE</span>
</span></span><span class="line"><span class="cl">        <span class="n">paint</span><span class="p">.</span><span class="n">color</span> <span class="p">=</span> <span class="nc">Color</span><span class="p">.</span><span class="n">RED</span>
</span></span><span class="line"><span class="cl">        <span class="n">canvas</span><span class="p">.</span><span class="n">drawRect</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">,</span> <span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span> <span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span> <span class="n">paint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ol start="2">
<li>Log measurements:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">override</span> <span class="k">fun</span> <span class="nf">onMeasure</span><span class="p">(</span><span class="n">widthMeasureSpec</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">heightMeasureSpec</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">super</span><span class="p">.</span><span class="n">onMeasure</span><span class="p">(</span><span class="n">widthMeasureSpec</span><span class="p">,</span> <span class="n">heightMeasureSpec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nc">BuildConfig</span><span class="p">.</span><span class="n">DEBUG</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">widthMode</span> <span class="p">=</span> <span class="nc">MeasureSpec</span><span class="p">.</span><span class="n">getMode</span><span class="p">(</span><span class="n">widthMeasureSpec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">widthSize</span> <span class="p">=</span> <span class="nc">MeasureSpec</span><span class="p">.</span><span class="n">getSize</span><span class="p">(</span><span class="n">widthMeasureSpec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nc">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="n">TAG</span><span class="p">,</span> <span class="s2">&#34;Width Mode: </span><span class="si">${getModeString(widthMode)}</span><span class="s2">, Size: </span><span class="si">$widthSize</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="testing-custom-views">Testing Custom Views</h2>
<p>Here&rsquo;s a basic test setup:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="nd">@RunWith</span><span class="p">(</span><span class="n">AndroidJUnit4</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ColorChangeCircleViewTest</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">lateinit</span> <span class="k">var</span> <span class="py">view</span><span class="p">:</span> <span class="n">ColorChangeCircleView</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nd">@Before</span>
</span></span><span class="line"><span class="cl">    <span class="k">fun</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">view</span> <span class="p">=</span> <span class="n">ColorChangeCircleView</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="nc">InstrumentationRegistry</span><span class="p">.</span><span class="n">getInstrumentation</span><span class="p">().</span><span class="n">targetContext</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="k">fun</span> <span class="nf">testColorChange</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">initialColor</span> <span class="p">=</span> <span class="n">view</span><span class="p">.</span><span class="n">getCurrentColor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">view</span><span class="p">.</span><span class="n">performClick</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">assertNotEquals</span><span class="p">(</span><span class="n">initialColor</span><span class="p">,</span> <span class="n">view</span><span class="p">.</span><span class="n">getCurrentColor</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="a-real-world-example-custom-progress-view">A Real-World Example: Custom Progress View</h2>
<p>Here&rsquo;s a more practical example - a custom progress view that fills up like a battery:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BatteryProgressView</span> <span class="nd">@JvmOverloads</span> <span class="k">constructor</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">attrs</span><span class="p">:</span> <span class="n">AttributeSet</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">defStyleAttr</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="p">:</span> <span class="n">View</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">attrs</span><span class="p">,</span> <span class="n">defStyleAttr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">var</span> <span class="py">progress</span> <span class="p">=</span> <span class="m">0f</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">val</span> <span class="py">paint</span> <span class="p">=</span> <span class="n">Paint</span><span class="p">(</span><span class="nc">Paint</span><span class="p">.</span><span class="n">ANTI_ALIAS_FLAG</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">val</span> <span class="py">rect</span> <span class="p">=</span> <span class="n">RectF</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">fun</span> <span class="nf">setProgress</span><span class="p">(</span><span class="k">value</span><span class="p">:</span> <span class="n">Float</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">progress</span> <span class="p">=</span> <span class="k">value</span><span class="p">.</span><span class="n">coerceIn</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">100f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">invalidate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onDraw</span><span class="p">(</span><span class="n">canvas</span><span class="p">:</span> <span class="n">Canvas</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">super</span><span class="p">.</span><span class="n">onDraw</span><span class="p">(</span><span class="n">canvas</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// Draw battery outline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">paint</span><span class="p">.</span><span class="n">style</span> <span class="p">=</span> <span class="nc">Paint</span><span class="p">.</span><span class="nc">Style</span><span class="p">.</span><span class="n">STROKE</span>
</span></span><span class="line"><span class="cl">        <span class="n">paint</span><span class="p">.</span><span class="n">color</span> <span class="p">=</span> <span class="nc">Color</span><span class="p">.</span><span class="n">GRAY</span>
</span></span><span class="line"><span class="cl">        <span class="n">rect</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">,</span> <span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span> <span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">        <span class="n">canvas</span><span class="p">.</span><span class="n">drawRect</span><span class="p">(</span><span class="n">rect</span><span class="p">,</span> <span class="n">paint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// Draw battery level
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">paint</span><span class="p">.</span><span class="n">style</span> <span class="p">=</span> <span class="nc">Paint</span><span class="p">.</span><span class="nc">Style</span><span class="p">.</span><span class="n">FILL</span>
</span></span><span class="line"><span class="cl">        <span class="n">paint</span><span class="p">.</span><span class="n">color</span> <span class="p">=</span> <span class="k">when</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">progress</span> <span class="p">&lt;</span> <span class="m">20f</span> <span class="o">-&gt;</span> <span class="nc">Color</span><span class="p">.</span><span class="n">RED</span>
</span></span><span class="line"><span class="cl">            <span class="n">progress</span> <span class="p">&lt;</span> <span class="m">50f</span> <span class="o">-&gt;</span> <span class="nc">Color</span><span class="p">.</span><span class="n">YELLOW</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="o">-&gt;</span> <span class="nc">Color</span><span class="p">.</span><span class="n">GREEN</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">levelWidth</span> <span class="p">=</span> <span class="p">(</span><span class="n">width</span> <span class="p">*</span> <span class="p">(</span><span class="n">progress</span> <span class="p">/</span> <span class="m">100f</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">rect</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">,</span> <span class="n">levelWidth</span><span class="p">,</span> <span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">        <span class="n">canvas</span><span class="p">.</span><span class="n">drawRect</span><span class="p">(</span><span class="n">rect</span><span class="p">,</span> <span class="n">paint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="resources-for-further-learning">Resources for Further Learning</h2>
<ul>
<li><a href="https://developer.android.com/develop/ui/views/layout/custom-views/create-view">Android Developer Documentation on Custom Views</a></li>
<li><a href="https://source.android.com/devices/graphics/architecture">Android Graphics Architecture</a></li>
<li><a href="https://material.io/design">Material Design Guidelines</a></li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Custom views are like cooking - start with the basic recipe, then add your own flavors. Don&rsquo;t be afraid to experiment, but always keep performance in mind. Your users (and the Android UI thread) will thank you!</p>
<p>Stay tuned for more Android development articles!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Kotlin Coroutines for the Beginners</title>
      <link>https://www.codefright.com/posts/kotlin-coroutines/</link>
      <pubDate>Thu, 12 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://www.codefright.com/posts/kotlin-coroutines/</guid>
      <description>Hey! Lets explore Kotlin Coroutines in this post.
What Are Coroutines? Think of coroutines as tiny workers in your code who can pause their work, go grab a coffee, and come back exactly where they left off. Unlike regular functions that must run to completion, coroutines can take breaks without blocking the main thread.
When a coroutine &amp;ldquo;takes a break,&amp;rdquo; it&amp;rsquo;s typically doing one of several things:
Waiting for I/O operations to complete (like reading from a file or making a network request) Yielding control to allow other coroutines to run Waiting for a timer or delay to expire Waiting for data from another coroutine or for some condition to be met The key point is that during these &amp;ldquo;breaks,&amp;rdquo; the coroutine isn&amp;rsquo;t actually consuming CPU resources.</description>
      <content:encoded><![CDATA[<p>Hey! Lets explore Kotlin Coroutines in this post.</p>
<h2 id="what-are-coroutines">What Are Coroutines?</h2>
<p>Think of coroutines as tiny workers in your code who can pause their work, go grab a coffee, and come back exactly where they left off. Unlike regular functions that must run to completion, coroutines can take breaks without blocking the main thread.</p>
<p>When a coroutine &ldquo;takes a break,&rdquo; it&rsquo;s typically doing one of several things:</p>
<ul>
<li>Waiting for I/O operations to complete (like reading from a file or making a network request)</li>
<li>Yielding control to allow other coroutines to run</li>
<li>Waiting for a timer or delay to expire</li>
<li>Waiting for data from another coroutine or for some condition to be met</li>
</ul>
<p>The key point is that during these &ldquo;breaks,&rdquo; the coroutine isn&rsquo;t actually consuming CPU resources. Instead, it&rsquo;s in a suspended state, and the program can do other useful work.</p>
<h2 id="getting-started">Getting Started</h2>
<p>First, you&rsquo;ll need to add the coroutines dependency to your <code>build.gradle</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">implementation</span> <span class="s2">&#34;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.1&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="the-basics-your-first-coroutine">The Basics: Your First Coroutine</h2>
<p>Let&rsquo;s start with something simple:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="n">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// Launch a coroutine in the lifecycle scope
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">lifecycleScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// This is suspended code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">delay</span><span class="p">(</span><span class="m">1000</span><span class="p">)</span> <span class="c1">// Wait for 1 second
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nc">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="s2">&#34;Coroutines&#34;</span><span class="p">,</span> <span class="s2">&#34;Hello from the future!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="understanding-dispatchers-where-your-coroutines-run">Understanding Dispatchers: Where Your Coroutines Run</h2>
<p>Think of dispatchers as different workspaces for your coroutines. Just like how you wouldn&rsquo;t do heavy lifting in a library or read a book at a gym, different coroutines need different environments:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">suspend</span> <span class="k">fun</span> <span class="nf">showHowDispatchersWork</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// For CPU-intensive tasks (like sorting lists, parsing JSON)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">withContext</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">Default</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">hugelist</span> <span class="p">=</span> <span class="p">(</span><span class="m">1.</span><span class="p">.</span><span class="m">1000000</span><span class="p">).</span><span class="n">toList</span><span class="p">().</span><span class="n">shuffled</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">hugelist</span><span class="p">.</span><span class="n">sorted</span><span class="p">()</span> <span class="c1">// Heavy computation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// For network/disk operations
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">withContext</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">IO</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Reading files, making API calls
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">val</span> <span class="py">data</span> <span class="p">=</span> <span class="n">URL</span><span class="p">(</span><span class="s2">&#34;https://api.example.com&#34;</span><span class="p">).</span><span class="n">readText</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// For UI updates
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">withContext</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">Main</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">binding</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="s2">&#34;Updated!&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="coroutine-builders-different-ways-to-launch">Coroutine Builders: Different Ways to Launch</h2>
<p>Coroutines come with different &ldquo;builders&rdquo; - think of them as different tools for different jobs:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">CoroutineDemo</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">fun</span> <span class="nf">showDifferentBuilders</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Fire and forget
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">lifecycleScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nc">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="s2">&#34;Demo&#34;</span><span class="p">,</span> <span class="s2">&#34;This just runs!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Returns a result
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">val</span> <span class="py">deferred</span> <span class="p">=</span> <span class="n">lifecycleScope</span><span class="p">.</span><span class="n">async</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">delay</span><span class="p">(</span><span class="m">1000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Hello from async!&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// runBlocking - Mainly for testing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">runBlocking</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">val</span> <span class="py">result</span> <span class="p">=</span> <span class="n">deferred</span><span class="p">.</span><span class="n">await</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="nc">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="s2">&#34;Demo&#34;</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="coroutine-scopes-the-parent-child-relationship">Coroutine Scopes: The Parent-Child Relationship</h2>
<p>Coroutines have a family tree. Each coroutine has a parent, and when the parent is cancelled, all its children are cancelled too. It&rsquo;s like a really responsible family:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MyViewModel</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">init</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span> <span class="c1">// Parent
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">launch</span> <span class="p">{</span> <span class="c1">// Child 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="c1">// Some work
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">launch</span> <span class="p">{</span> <span class="c1">// Child 2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="c1">// More work
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="the-cool-benefits-of-coroutines">The Cool Benefits of Coroutines</h2>
<p>Why should you fall in love with coroutines? Here&rsquo;s why:</p>
<ol>
<li>
<p><strong>They&rsquo;re Light as a Feather</strong>: While threads might take 1MB+ of memory, coroutines only need a few bytes. You can run thousands of them without breaking a sweat!</p>
</li>
<li>
<p><strong>Structured Concurrency</strong>: Coroutines are organized in a way that makes error handling and cancellation much more predictable. When a parent coroutine is cancelled, all its children are automatically cancelled too:</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">userInfo</span> <span class="p">=</span> <span class="n">async</span> <span class="p">{</span> <span class="n">fetchUserInfo</span><span class="p">()</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">userPosts</span> <span class="p">=</span> <span class="n">async</span> <span class="p">{</span> <span class="n">fetchUserPosts</span><span class="p">()</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// Wait for both results
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">displayUserProfile</span><span class="p">(</span><span class="n">userInfo</span><span class="p">.</span><span class="n">await</span><span class="p">(),</span> <span class="n">userPosts</span><span class="p">.</span><span class="n">await</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="n">Exception</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Handles errors from both operations!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">showError</span><span class="p">(</span><span class="s2">&#34;Oops, something went wrong!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ol start="3">
<li><strong>Sequential by Default</strong>: Writing async code that looks like sync code is a superpower:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// The old way (callbacks)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">fetchUserData</span> <span class="p">{</span> <span class="n">user</span> <span class="o">-&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="n">fetchUserPosts</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="p">{</span> <span class="n">posts</span> <span class="o">-&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="n">fetchPostComments</span><span class="p">(</span><span class="n">posts</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">id</span><span class="p">)</span> <span class="p">{</span> <span class="n">comments</span> <span class="o">-&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Welcome to callback hell!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// The coroutine way
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">lifecycleScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">user</span> <span class="p">=</span> <span class="n">fetchUserData</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">posts</span> <span class="p">=</span> <span class="n">fetchUserPosts</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">comments</span> <span class="p">=</span> <span class="n">fetchPostComments</span><span class="p">(</span><span class="n">posts</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Clean and simple!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h2 id="watch-out-for-these-gotchas">Watch Out For These Gotchas!</h2>
<p>Here are some common pitfalls to watch out for:</p>
<ol>
<li>
<p><strong>The Infinite Coroutine</strong>: Don&rsquo;t forget to cancel your coroutines! It could result in memory leaks.</p>
</li>
<li>
<p><strong>Wrong Context</strong>: Running network calls on the main thread is like trying to juggle while riding a unicycle.</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// DON&#39;T DO THIS
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">lifecycleScope</span><span class="p">.</span><span class="n">launch</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">Main</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Heavy network operation 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">api</span><span class="p">.</span><span class="n">fetchLargeData</span><span class="p">()</span> <span class="c1">// App freezes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// DO THIS INSTEAD
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">lifecycleScope</span><span class="p">.</span><span class="n">launch</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">IO</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Heavy network operation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">val</span> <span class="py">data</span> <span class="p">=</span> <span class="n">api</span><span class="p">.</span><span class="n">fetchLargeData</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">withContext</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">Main</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Update UI safely
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">showData</span><span class="p">(</span><span class="k">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ol start="3">
<li><strong>The Scope Mixup</strong>: Using the wrong scope can lead to memory leaks or crashes:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// DON&#39;T: Using GlobalScope is like using a global variable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nc">GlobalScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// This might outlive your activity!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// DO: Use structured concurrency
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">lifecycleScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// This gets cancelled when your activity does
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><ol start="4">
<li><strong>The Context Switch Confusion</strong>:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="n">lifecycleScope</span><span class="p">.</span><span class="n">launch</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">IO</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">data</span> <span class="p">=</span> <span class="n">fetchData</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">binding</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="k">data</span> <span class="c1">// Crash! Can&#39;t touch UI here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">    <span class="n">withContext</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">Main</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">binding</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="k">data</span> <span class="c1">// This is the way
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ol start="5">
<li><strong>The Exception Escape</strong>: Coroutines can be sneaky with exceptions:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// DON&#39;T: Silent failure
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">lifecycleScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s2">&#34;Boom!&#34;</span><span class="p">)</span> <span class="c1">// Gets swallowed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// DO: Handle your exceptions
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">lifecycleScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s2">&#34;Boom!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="n">Exception</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nc">Log</span><span class="p">.</span><span class="n">e</span><span class="p">(</span><span class="s2">&#34;Error&#34;</span><span class="p">,</span> <span class="s2">&#34;Something went wrong&#34;</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">showErrorToUser</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">message</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="real-world-examples">Real-World Examples</h2>
<h3 id="image-loading">Image Loading</h3>
<p>Here&rsquo;s a practical example of using coroutines for loading images:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ImageLoader</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">fun</span> <span class="nf">loadImage</span><span class="p">(</span><span class="n">imageUrl</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">imageView</span><span class="p">:</span> <span class="n">ImageView</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Launch in the Main scope but switch to IO for network
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">lifecycleScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">val</span> <span class="py">bitmap</span> <span class="p">=</span> <span class="n">withContext</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">IO</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">URL</span><span class="p">(</span><span class="n">imageUrl</span><span class="p">).</span><span class="n">openStream</span><span class="p">().</span><span class="n">use</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">                        <span class="nc">BitmapFactory</span><span class="p">.</span><span class="n">decodeStream</span><span class="p">(</span><span class="k">it</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// Back on Main thread
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">imageView</span><span class="p">.</span><span class="n">setImageBitmap</span><span class="p">(</span><span class="n">bitmap</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="n">Exception</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// Handle error
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="nc">Log</span><span class="p">.</span><span class="n">e</span><span class="p">(</span><span class="s2">&#34;ImageLoader&#34;</span><span class="p">,</span> <span class="s2">&#34;Failed to load image&#34;</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="building-a-cachenetwork-data-fetcher">Building a Cache+Network Data Fetcher</h3>
<p>Let&rsquo;s see how coroutines shine in a real-world scenario:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">DataRepository</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">fetchUserData</span><span class="p">(</span><span class="n">userId</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">User</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Try cache first
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">withContext</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">IO</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">val</span> <span class="py">cachedUser</span> <span class="p">=</span> <span class="n">database</span><span class="p">.</span><span class="n">getUser</span><span class="p">(</span><span class="n">userId</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="n">cachedUser</span><span class="p">.</span><span class="n">isUpToDate</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span><span class="nd">@withContext</span> <span class="n">cachedUser</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">                <span class="c1">// Cache miss or outdated, fetch from network
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">val</span> <span class="py">freshUser</span> <span class="p">=</span> <span class="n">api</span><span class="p">.</span><span class="n">fetchUser</span><span class="p">(</span><span class="n">userId</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">                <span class="c1">// Update cache in the background
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">launch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">database</span><span class="p">.</span><span class="n">saveUser</span><span class="p">(</span><span class="n">freshUser</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">                <span class="n">freshUser</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="n">Exception</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// If everything fails, at least try to return cached data
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">database</span><span class="p">.</span><span class="n">getUser</span><span class="p">(</span><span class="n">userId</span><span class="p">)</span> <span class="o">?:</span> <span class="k">throw</span> <span class="n">e</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Understanding Coroutines might seem difficult at first, but once you get the hang of them, you&rsquo;ll wonder how you ever lived without them. They provide a powerful way to handle asynchronous operations with clean, readable code that&rsquo;s both efficient and maintainable.</p>
<p>Don&rsquo;t forget to checkout my other articles!</p>
]]></content:encoded>
    </item>
    <item>
      <title></title>
      <link>https://www.codefright.com/resume/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.codefright.com/resume/</guid>
      <description>Anu S Pillai Android | Kotlin | Flutter
✉️ anu_icloud@icloud.com | 📍 Bangalore, India
Summary Experienced Android and Kotlin developer with over 11 years of expertise designing, architecting and developing Android applications, SDKs and library projects. Extensive experience leading teams and delivering high-quality software solutions.
Successfully developed and published over 25 apps on PlayStore, including apps with over 100K downloads, such as South Indian Bank mPassbook, Scootsy (acquired by Swiggy), Revofit (a fitness/lifestyle app backed by Marico), Wellthy Care (a chronic disease management platform, acquired by TruDoc Inc.</description>
      <content:encoded><![CDATA[<h1 id="anu-s-pillai">Anu S Pillai</h1>
<p>Android | Kotlin | Flutter<br>
✉️ <a href="mailto:anu_icloud@icloud.com">anu_icloud@icloud.com</a> | 📍 Bangalore, India</p>
<h2 id="summary">Summary</h2>
<p>Experienced Android and Kotlin developer with over 11 years of expertise designing, architecting and developing Android applications, SDKs and library projects. Extensive experience leading teams and delivering high-quality software solutions.</p>
<p>Successfully developed and published over 25 apps on PlayStore, including apps with over 100K downloads, such as South Indian Bank mPassbook, Scootsy (acquired by Swiggy), Revofit (a fitness/lifestyle app backed by Marico), Wellthy Care (a chronic disease management platform, acquired by TruDoc Inc.), and Catch &amp; Win - Howzzattt (a 2D game developed using AndEngine for Toonz Animation India).</p>
<p>Passionate about learning and mastering new technologies and frameworks independently. Enjoys sharing knowledge through meetups, blogging, and open-source contributions. Would love to explore more of KMM and mobile LLMs.</p>
<h2 id="experience">Experience</h2>
<h3 id="tech-lead---apps-and-frameworks">Tech Lead - Apps and Frameworks</h3>
<p><strong>Borqs Software Solutions, Bangalore</strong> <em>(2023 - Present)</em></p>
<ul>
<li>Leading a team working on an array of inhouse as well as ODC projects involving Android, Kotlin, Flutter</li>
<li>Worked as an Android / Kotlin Tech Consultant for an AAOS - Kotlin project for Qualcomm Inc.</li>
<li>Lead a team designing and architecting a Kotlin MQTT Cloud Sync module + Flutter companion app for an overseas Android Automotive project</li>
<li>Currently working with Meta Inc. (Facebook) for developing a Flutter based cross-platform desktop project</li>
<li>Actively participate in code reviews and project architecture discussions. Conduct internal meetups to upskill and mentor developers</li>
</ul>
<h3 id="lead-software-developer---android">Lead Software Developer - Android</h3>
<p><strong>Wellthy Therapeutics, Bangalore</strong> <em>(2021 - 2023)</em></p>
<ul>
<li>Architected and developed Wellthy app and SDK for Android platform with 100K+ downloads and maintaining &gt;99% weekly crash free users</li>
<li>Lead developer responsible for architecting and developing new feature requirements</li>
<li>Worked on Improving app user experience and timely bug fixes which resulted in PlayStore rating going up from 3.5 to 4.6 in a year</li>
<li>Collaborated with cross-functional teams to design and develop features that met business requirements</li>
<li>Led the team to brainstorm and implement code optimizations and features which led to a significant improvement in code reusability, modularity and maintainability</li>
<li>Helped the organization to achieve faster development goals by introducing code templates and generators</li>
<li>Overlooking the Sprint plans, Task prioritization and ensure timely sprint / task closure</li>
<li>Maintaining the team&rsquo;s performance scorecards, BvA analysis, setting and tracking quarterly goals</li>
<li>Lead the Wellthy SDK development team to develop and document SDK based on Wellthy Platform</li>
</ul>
<h3 id="senior-software-developer---android">Senior Software Developer - Android</h3>
<p><strong>Wellthy Therapeutics, Bangalore</strong> <em>(2017 - 2021)</em></p>
<ul>
<li>Architected and developed Wellthy app for Android platform</li>
<li>Developed and maintained mobile applications using Kotlin language</li>
<li>Bug tracking / Fixing and timely release and team management</li>
<li>Write and review test cases</li>
</ul>
<h3 id="senior-application-developer">Senior Application Developer</h3>
<p><strong>Scootsy (Acquired by Swiggy), Mumbai</strong> <em>(2014 - 2017)</em></p>
<ul>
<li>Led the team developing Android Apps like Scootsy, Revofit, Scootsy VMS from scratch</li>
<li>Developed and maintained mobile applications using Java</li>
<li>Collaborated with cross-functional teams to design and develop mobile applications</li>
<li>Developer responsible for coordinating the project. Followed Agile / Scrum development methodology</li>
</ul>
<h3 id="junior-android-developer">Junior Android Developer</h3>
<p><strong>Simrge, Trivandrum</strong> <em>(2013 - 2014)</em></p>
<ul>
<li>Developed Android Apps like mParking Dubai, Howzzattt 2D Game using AndEngine, SIB mPassbook (Android + Blackberry), iCRM for vTiger</li>
<li>First Android Hire. Followed Agile development</li>
</ul>
<h2 id="education">Education</h2>
<h3 id="bachelor-of-information-technology">Bachelor of Information Technology</h3>
<p><strong>Anna University, Chennai</strong> <em>(2008 - 2012)</em></p>
<h2 id="skills">Skills</h2>
<h3 id="languages">Languages</h3>
<ul>
<li>Kotlin (Proficient)</li>
<li>Java (Proficient)</li>
<li>Flutter / Dart (Advanced)</li>
<li>KMM (Beginner)</li>
<li>Python (Intermediate)</li>
</ul>
<h3 id="technical-skills">Technical Skills</h3>
<ul>
<li><strong>Architecture:</strong> MVVM, Clean Architecture</li>
<li><strong>Frameworks / Tools:</strong> RxJava, Coroutines &amp; Flows, Dagger/Hilt, Jenkins, Flutter Isolates, Jetpack Compose</li>
<li><strong>Database:</strong> Realm, Room, SQLite</li>
<li><strong>Version Control:</strong> Github, Bitbucket</li>
<li><strong>Project Management:</strong> JIRA</li>
<li><strong>Test Cases:</strong> JUnit, Mockito, Espresso</li>
</ul>
<h2 id="links">Links</h2>
<ul>
<li><a href="https://stackoverflow.com/users/2369140/asp">Stack Overflow</a></li>
<li><a href="https://linkedin.com/in/anuspillai">LinkedIn</a></li>
<li><a href="https://github.com/anugotta">GitHub</a></li>
<li><a href="https://twitter.com/as_pillai">Twitter</a></li>
<li><a href="https://codefright.com">Blog</a></li>
</ul>
<h2 id="notable-projects">Notable Projects</h2>
<h3 id="wellthy-care-wellthy-therapeutics">WELLTHY CARE (WELLTHY THERAPEUTICS)</h3>
<p><a href="https://play.google.com/store/apps/details?id=wellthy.care&amp;hl=en_GB">View on Play Store</a></p>
<p>Wellthy Care is the digital health coach that will help you manage diabetes, chronic kidney disease (CKD) and other such chronic conditions.</p>
<ul>
<li>Technologies used: Kotlin, MVVM, Hilt, Coroutines, Retrofit with RxJava for API calls, Realm, Espresso, JUnit, AWS Mqtt</li>
</ul>
<h3 id="scootsy-acquired-by-swiggy">SCOOTSY (ACQUIRED BY SWIGGY)</h3>
<p><a href="https://play.google.com/store/apps/details?id=com.antfarm.scootsy">View on Play Store</a></p>
<p>Scootsy is an intra-city delivery service in Mumbai that delivers from the best restaurants, food stores, book shops, toy stores, fashion outlets, gift shops, sport stores and more.</p>
<ul>
<li>Technologies used: Java, SQLite, Retrofit, Socket.IO, Firebase, GraphQL</li>
</ul>
<h3 id="south-indian-bank-m-passbook-android--windows-blackberry">SOUTH INDIAN BANK M-PASSBOOK (ANDROID / WINDOWS /BLACKBERRY)</h3>
<p><a href="https://www.southindianbank.com/content/viewContentLvl2.aspx?linkIdLvl2=16&amp;linkid=731">View Details</a></p>
<p>India&rsquo;s one of the first mobile passbook app. Track your SIB account transactions on the go. Developed for South Indian Bank. Developed for Android and Windows. Ported to Blackberry.</p>
<ul>
<li>Technologies used: Java, SQLite, Retrofit, C# (for Windows app)</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Featured Projects</title>
      <link>https://www.codefright.com/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.codefright.com/projects/</guid>
      <description>Open source projects and contributions in Android, Kotlin, and Flutter</description>
      <content:encoded><![CDATA[<ol>
<li><strong><a href="https://github.com/anugotta/FlipTimerView">FlipTimerView</a></strong> - FlipTimerView library for Android developed in Kotlin.</li>
<li><strong><a href="https://github.com/anugotta/http_cyclic_mocks">http_cyclic_mocks</a></strong> - A Simple and lightweight Dart library for mocking/overriding HTTP responses with Dio. In this library you can add multiple responses for a single route/api endpoint..</li>
</ol>
]]></content:encoded>
    </item>
  </channel>
</rss>
